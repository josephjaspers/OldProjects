/*
 * BC_Tensor_Intermediate_Identity.h
 *
 *  Created on: Dec 1, 2017
 *      Author: joseph
 */

#ifndef BC_TYPECLASS_IDENTITY_H_
#define BC_TYPECLASS_IDENTITY_H_

/*
 * Compile Time Unit
 */




#include "BC_Internal_Include.h"
namespace BC_Shape_Identity {

	template<int...>
	struct ranks;

	template<class T, class ml, class dims>
	struct Identity;

	template<class T, class ml, template<int...> class shape, int ... dimensions>
	struct Identity<T, ml, shape<dimensions...>> {
		using type = Tensor<T, ranks<dimensions...>, ml>;
	};

	template<class T, class ml, template<int...> class shape, int rows>
	struct Identity<T, ml, shape<rows>> {
		using type = Vector<T, rows, ml>;
	};

	template<class T, class ml, template<int...> class shape, int rows, int cols>
	struct Identity<T, ml, shape<rows, cols>> {
		using type = Matrix<T,rows, cols, ml>;
	};

	template<class T, class ml, template<int...> class shape, int rows, int cols, int depth>
	struct Identity<T, ml, shape<rows, cols, depth>> {
		using type = Cube<T, rows, cols, depth, ml>;
	};
}

namespace BC_Evaluation_Identity {

	template<class T>
	struct asRef {
		using type = T&;
	};
	template<class T, class ml,class shape>
	struct Identity;

	template<class T, class ml, template<int...> class shape,int ... dimensions>
	struct Identity<T, ml, shape<dimensions...>> {
		//if type is non-expression the type returns itself as a reference
		using nonRef_type = T;
		using type = typename asRef<nonRef_type>::type;
	};

	template<class T, class deriv, class ml, template<int...> class shape, int ... dimensions>
	struct Identity<expression<T, deriv>, ml,shape<dimensions...>> {
		using nonRef_type = typename BC_Shape_Identity::Identity<T, ml, shape<dimensions...>>::type;
		using type = nonRef_type;
	};
}



namespace BC_ArrayType {

	template<class T, class voider = void>
	struct Identity {
		using type = T;
	};
	template<class T, class deriv>
	struct Identity<expression<T, deriv>> {
		using type = T;
	};
}


namespace BC_Substitute_Type {

}
#endif /* BC_TYPECLASS_IDENTITY_H_ */
