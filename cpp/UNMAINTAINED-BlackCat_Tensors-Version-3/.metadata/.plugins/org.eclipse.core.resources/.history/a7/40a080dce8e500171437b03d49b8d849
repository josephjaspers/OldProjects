/*
 * Dynamic_Shape.h
 *
 *  Created on: Dec 20, 2017
 *      Author: joseph
 */

#ifndef DYNAMIC_SHAPE_H_
#define DYNAMIC_SHAPE_H_

/*
 * BC_Tensor_Super_Ace.h
 *
 *  Created on: Nov 18, 2017
 *      Author: joseph
 */

template<class inner, class outer>
struct Dynamic_Shape : inner, outer {


};

struct Dynamic_Inner_Shape {

};

template<int ... dimensions>
struct Outer_Shape {

	static constexpr int LD_RANK = sizeof...(dimensions);

	void printLeadingDimensions() const {
		BC_Shape_Identity_impl::print<Outer_Shape<dimensions...>>();
	}

	constexpr int LD_size() const {
		return BC_Shape_Identity_impl::size<dimensions...>();
	}
	constexpr int LD_rows() const {
		return BC_Shape_Identity_impl::row<dimensions...>();
	}
	constexpr int LD_cols() const {
		return BC_Shape_Identity_impl::col<dimensions...>();
	}
	constexpr int LD_depth() const {
		return BC_Shape_Identity_impl::depth<dimensions...>();
	}
	constexpr int LD_pages() const {
		return BC_Shape_Identity_impl::pages<dimensions...>();
	}
	constexpr int LD_books() const {
		return BC_Shape_Identity_impl::books<dimensions...>();
	}
	constexpr int LD_libraries() const {
		return BC_Shape_Identity_impl::libraries<dimensions...>();
	}

	template<int dim_index> constexpr int LD_dimension() const {
		return BC_Shape_Identity_impl::dimension<dim_index, dimensions...>();
	}
};

#endif /* DYNAMIC_SHAPE_H_ */
