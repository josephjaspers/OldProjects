/*
 * Shape.h
 *
 *  Created on: Jan 18, 2018
 *      Author: joseph
 */

#ifndef SHAPE_H_
#define SHAPE_H_

namespace BC {
class _expression {};
class _accessor {};
class _transpose {};
class _dotproduct {};

struct inner_shape {

	static constexpr int COMPILE_TIME_ROWS() { return 0; }
	static constexpr int COMPILE_TIME_COLS() { return 0; }


	const int parent;
	int sz = 1;
	int *is = &sz;
	int order = 0 ;
	int rank() const { return order; }
	int size() const { return sz; }
	int rows() const { return order > 0  ? is[0] : 1; }
	int cols() const { return order > 1  ? is[1] : 1; }

	const auto InnerShape() const { return is; }

	inner_shape() : parent(false){}
	inner_shape(std::initializer_list<int> sh) : order(sh.size()), parent(true) {
		sz = 1;
		is = new int[order];
		for (int i = 0; i < order; ++i) {
			sz *= sh.begin()[i];
			is[i] =  sh.begin()[i];
		}
	}

	inner_shape(const inner_shape&  sh, _expression) : parent(false), sz(sh.sz), order(sh.order), is(sh.is) {}
	inner_shape(const inner_shape&  sh, _accessor  ) : parent(false), sz(sh.sz / sh.is[sh.order - 1]), order(sh.order - 1), is(sh.is) {}
	~inner_shape() {
		if (parent) {
			delete[] is;
		}
	}

	void printDimensions() const {
		for (int i = 0; i < order; ++i) {
			std::cout << "[" << is[i] << "]";
		}
		std::cout << std::endl;
	}
};



struct outer_shape {

	static constexpr int COMPILE_TIME_LD_ROWS() { return 0; }
	static constexpr int COMPILE_TIME_LD_COLS() { return 0; }

	int one = 1;
	const int parent = false;
	int * is = &one;
	int order = 0;

	int LD_rows() const { return order > 0  ? is[0] : 1; }
	int LD_cols() const { return order > 1  ? is[1] : 1; }
	const auto OuterShape() const { return is; }
	outer_shape() : parent(false) {}
	outer_shape(std::initializer_list<int> sh) : order(sh.size()), parent(true) {
		is = new int[order];
		for (int i = 0; i < order; ++i) {
			is[i] =  sh.begin()[i];
		}
	}

	outer_shape(const outer_shape& sh, _expression) : is(sh.is), parent(false), order(sh.order) {}
	outer_shape(const outer_shape& sh, _accessor  ) : is(sh.is), parent(false), order(sh.order) {}
	~outer_shape() {
		if (parent) {
			delete[] is;
		}
	}
};


template<class T>
struct shape_packet {
	const inner_shape& is;
	const outer_shape& os;

	shape_packet(const inner_shape& is_, const outer_shape& os_) : is(is_), os(os_) {}
};


template<>
struct shape_packet<_transpose> {

	int row = 1;
	int col = 1;
	int order;
	const outer_shape& os;
	shape_packet(int rows, const outer_shape& os) : row(rows), order(1), os(os) {}
	shape_packet(int rows, int cols, const outer_shape& os) : row(rows), col(cols), order(2), os(os) {}
	shape_packet(int order, int rows, int cols, const outer_shape& os) : row(rows), col(cols), order(order), os(os) {}

};
template<>
struct shape_packet<_dotproduct> {

	int row;
	int col;
	int order;
	shape_packet(int ORDER, int r, int c = 1) : row(r), col(c), order(ORDER){}
};



template<class INNER, class OUTER>
struct Shape : public INNER, public OUTER {

	const inner_shape& getInner() const { return *this; }
	const outer_shape& getOuter() const { return *this; }

	const bool array_ownership = INNER::parent and OUTER::parent;

	using IS = INNER;
	using OS = OUTER;

	auto expression_packet() const  { return shape_packet<_expression>(getInner(), getOuter()); }
	auto accessor_packet() const    { return shape_packet<_accessor  >(getInner(), getOuter()); }
	auto transpose_packet() const   { return shape_packet<_transpose>(this->rank(), this->cols(), this->rows(), getOuter()); }
	auto dotproduct_packet(int eval_order, const Shape& sh) const  { return shape_packet<_dotproduct>(Shape<INNER, OUTER>::rank(), this->rows(), sh.cols()); }

	const Shape& asShape() const { return *this; }


	Shape(std::initializer_list<int> param) : INNER(param), OUTER(param) {}
	Shape() : array_ownership(false) {}

/*

	void print_() {}
	template<class T>
	void print_ (T t) { std::cout << t << std::endl; }
	template<class...T, class M>
	void print_(M m, T... t)  { std::cout << m << std::endl; print_(t...); }

*/

	template<class... T>
	std::initializer_list<int> init(T... set) {
		return std::initializer_list<int> { set... };
	}

	template<class pass_type>
	Shape(shape_packet<pass_type> exp) : INNER(exp.is, pass_type()), OUTER(exp.os, pass_type()) {}
	Shape(shape_packet<_transpose> exp) : INNER(exp.order == 1 ? init(exp.col) : init(exp.row, exp.col)), //1== Vector, else Matrix order//
											OUTER(exp.os) {
	}
	Shape(shape_packet<_dotproduct> exp) : INNER(exp.order == 1 ? init(exp.row) : init(exp.row, exp.col)), //1== Vector, else Matrix order//
												OUTER(exp.order == 1 ? init(exp.row) : init(exp.row, exp.col)) {
		}



};

}
#endif /* SHAPE_H_ */
