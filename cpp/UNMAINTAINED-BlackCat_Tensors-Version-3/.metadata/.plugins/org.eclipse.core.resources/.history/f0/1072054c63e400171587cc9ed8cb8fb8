/*
 * BC_Tensor_TailedBeast.h
 *
 *  Created on: Dec 18, 2017
 *      Author: joseph
 */

#ifndef BC_TENSOR_TAILEDBEAST_H_
#define BC_TENSOR_TAILEDBEAST_H_


#include "../BlackCat_Global_Unifier.h"
#include "BC_Tensor_Scalar.h"

template<class T, class inner_shape, class outer_shape, class lib, //default = CPU,
		class LD // default = typename DEFAULT_LD<Inner_Shape<row>>::type
>
class Vector : public Tensor_Base<T, Vector<T, row, lib>, lib, Inner_Shape<row>, typename DEFAULT_LD<Inner_Shape<row>>::type> {

	using functor_type = typename Tensor_FunctorType<T>::type;
	using parent_class = Tensor_Base<T, Vector<T, row, lib>, lib, Inner_Shape<row>, typename DEFAULT_LD<Inner_Shape<row>>::type>;
	using grandparent_class = typename parent_class::grandparent_class;
	using this_type = Vector<T, row, lib>;

public:
	Vector() = default;
	template<class ... params> 	Vector(params ... p) : parent_class(p...) {}

	template<class U> 		  	Vector(const Vector<U, row, lib>&  vec) : parent_class() { (*this) = vec; }
	template<class U>		  	Vector(      Vector<U, row, lib>&& vec) : parent_class() { (*this) = vec; }

	template<class U> Vector<T, row, lib>& operator =(const Vector<U, row, lib>& v) {

		static_assert(grandparent_class::ASSIGNABLE, "Vector<T, row, lib> of type T is non assignable (use Eval() to evaluate expression-tensors)");

		this->size() > 9999 ?
			lib::copy(this->data(), v.data(), this->size())
		:
			lib::copy_single_thread(this->data(), v.data(), this->size());

		return *this;
	}

	template<int sub_row>
	const Scalar<T, lib> operator [] (int index) const {
		static_assert(grandparent_class::ASSIGNABLE, "cannot index expression-tensors (use eval() to authenticate)");
		return Scalar<T, lib>(&(this->array[index]));
	}
	 	  Scalar<T, lib> operator [] (int index) {
	 		 static_assert(grandparent_class::ASSIGNABLE, "cannot index expression-tensors (use eval() to authenticate)");
			return Scalar<T, lib>(&(this->array[index]));
	}

};

#endif /* BC_TENSOR_TAILEDBEAST_H_ */
