/*
 * Transpose_Wrapper.h
 *
 *  Created on: Dec 19, 2017
 *      Author: joseph
 */

#ifndef EXPRESSION_UNARY_MATRIXTRANSPOSITION_H_
#define EXPRESSION_UNARY_MATRIXTRANSPOSITION_H_
#include <cmath>
#include "Expression_Base.h"
#include "../BC_MetaTemplateFunctions/Adhoc.h"

//#include "Expression_Base.h"
//#include "../BC_MetaTemplateFunctions/Adhoc.h"
//#include "BlackCat_Internal_Definitions.h" //__BC_gcpu__

namespace BC {
template<class T, class parent>
struct unary_expression_transpose_mat : expression<T, unary_expression_transpose_mat<T, parent>>
{
	// Rows and Cols are the CURRENT rows and columns of the
	// Utilizing CUDA's experimental-flag for calling constexpr expression (seems to be working fine)

	using this_type = unary_expression_transpose_mat<T,parent>;
	using functor_type = typename MTF::determine_functor<T>::type;


	functor_type array;
	const parent& root;

	unary_expression_transpose_mat(const parent& p, functor_type data) : array(data), root(p) {}

	__attribute__((always_inline)) __BC_gcpu__  auto& operator [](int index) {
		return array[(int)floor(index / root.cols()) + (index % root.cols()) * root.rows()];
	}
	__attribute__((always_inline))  __BC_gcpu__ const auto& operator[](int index) const {
		return array[(int) floor(index / root.cols()) + (index % root.cols()) * root.rows()];
	}
};

}
#endif /* EXPRESSION_UNARY_MATRIXTRANSPOSITION_H_ */
