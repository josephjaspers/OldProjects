/*
 * BC_Tensor_Base2.h
 *
 *  Created on: Dec 12, 2017
 *      Author: joseph
 */

#ifndef BC_TENSOR_VECTOR_H_
#define BC_TENSOR_VECTOR_H_

#include "BC_Tensor_Lv3_Math_Simple.h"

template<class T,
		 int row,
		 class lib = CPU>
class Vector : public Tensor_Base<T, Vector<T, row, lib>, lib,  typename Shape_Parser<row>::type::inner_shape,
														 typename Shape_Parser<row>::type::outer_shape> {

	using parent_class = Tensor_Base<T, Vector<T, row, lib>, lib,  typename Shape_Parser<row>::type::inner_shape,typename Shape_Parser<row>::type::outer_shape>;
	using this_type    = Vector<T, row, lib>;


public:
	Vector() = default;

	template<class... params>
	Vector(params... p) : parent_class(p...) {}

	using ml = lib;
	void randomize() {
		ml::randomize(this->data(), -3, 3, this->size());
	}

	void print() const {
		for (int i = 0; i < this->size(); ++i) {
			std::cout << this->data()[i] << " ";
		}
		std::cout << std::endl;
	}

	template<class vec>
	Vector<T, row, lib>& operator = (const vec& v) {
		for (int i = 0; i < this->size(); ++i) {
			this->data()[i] = (v.data())[i];
		}
		return * this;
	}
};

#endif /* BC_TENSOR_VECTOR_H_ */
