/*
 * BC_Tensor_Base.h
 *
 *  Created on: Dec 11, 2017
 *      Author: joseph
 */

#ifndef BC_TENSOR_BASE_H_
#define BC_TENSOR_BASE_H_

#include "BC_Typeclass_FunctionType.h"
#include "BC_Internal_Include.h"
#include "BC_Typeclass_Identity.h"
template <
class array_T,									//The internal array type
class derived,									//The derived class
class math_lib,					    		    //Math_library
class shape,									//The shape of the tensor
bool  isParent = BC_MTF::is_same<typename shape::inner_shape, DEFAULT_LD<typename shape::inner_shape>>::conditional,
class child_destroyer = void//constexpr bool - ownership of internal array
>
struct Tensor_Type : shape {

	using functor_type    = typename Tensor_FunctorType<array_T>::type;			//either T* if primitive else an array wrapper
	using scalar_type 	  = typename BC_ArrayType::Identity<array_T>::type;

	using identity_type   = typename BC_Shape_Identity::Identity<array_T, math_lib, typename shape::inner_shape>::type;
	using evaluation_type = typename BC_Evaluation_Identity::Identity<array_T, math_lib, typename shape::inner_shape>::type;

	using math_library 	  = math_lib;											//The math library generally either the default CPU lib or a CUDA lib (Cuda lib not yet written)

	functor_type array; 														//This is the internal array

	Tensor_Type() { math_lib::initialize(array, this->size()); } 				//Assumes array is a pointer to a primitive type, initializes with the apropriate math_lib call
	template<class... params> Tensor_Type(params... p) : array(p...) {
	}  //variations for initializing the field array

	~Tensor_Type() { if (isParent) math_lib::destroy(array); }


		  evaluation_type eval() 	   { return static_cast<evaluation_type>(*this); }
	const evaluation_type eval() const { return static_cast<evaluation_type>(*this); }

		  functor_type    data()	   { return array; }
	const functor_type	  data() const { return array; }
};


template <
class array_T,									//The internal array type
class derived,									//The derived class
class math_lib,					    		    //Math_library
class shape									//The shape of the tensor
>
struct Tensor_Type<array_T, derived, math_lib, shape,
BC_MTF::is_same<typename shape::inner_shape, DEFAULT_LD<typename shape::inner_shape>>::conditional,
std::enable_if<
	BC_MTF::OR<
	BC_MTF::isFalse<BC_MTF::is_same<typename shape::inner_shape, DEFAULT_LD<typename shape::inner_shape>>::conditional>::conditional,
	BC_MTF::isFalse<Tensor_Functor<array_T>::supports_utility>::conditional>::conditional, void>::type>

: shape {

	using functor_type    = typename Tensor_FunctorType<array_T>::type;			//either T* if primitive else an array wrapper
	using scalar_type 	  = typename BC_ArrayType::Identity<array_T>::type;

	using identity_type   = typename BC_Shape_Identity::Identity<array_T, math_lib, typename shape::inner_shape>::type;
	using evaluation_type = typename BC_Evaluation_Identity::Identity<array_T, math_lib, typename shape::inner_shape>::type;

	using math_library 	  = math_lib;											//The math library generally either the default CPU lib or a CUDA lib (Cuda lib not yet written)

	functor_type array; 														//This is the internal array

	template<class... params> Tensor_Type(params... p) : array(p...) {
	}  //variations for initializing the field array

	~Tensor_Type() {}


		  evaluation_type eval() 	   { return static_cast<evaluation_type>(*this); }
	const evaluation_type eval() const { return static_cast<evaluation_type>(*this); }

		  functor_type    data()	   { return array; }
	const functor_type	  data() const { return array; }
};
#endif /* BC_TENSOR_BASE_H_ */
